ex1:  Allocate 1024 bytes of kernel buffer and implement a char driver to provide 
      read/write ops on that buffer. write test applications to test read/write ops

Note: Use copy_to/copy_from kernel helper routines transfer data to/from driver buffer  
      to applications

ex2: Allocate 2 kernel buffers of 1024 bytes each(DEVBUFA, DEVBUFB)implement a 
     char driver  that maps DEVBUFA to /dev/bufa  and DEVBUFB to /dev/bufb. 
     Driver should provide support for read/write operations.

Note: Register char driver using dynamic major no's


ex3: Register/Unregister a char driver using helper functions register_chrdev & 
     unregister_chrdev   

Note: Access helper function documentation from kernel source tree using ctags
      (vim -t __register_chrdev)


ex4: write a char driver that implements open,release, and ioctl functions.
      Implement ioctl routine to support READ and WRITE commands, that read or 
      write data from/to kernel buffer of size 1024 bytes.

      write an application that uses ioctl api to carry out execute read / write operations on
      device.


ex 5: Implement char driver that supports open, release, and ioctl operations 
      on Advanced Programmable Interrupt Controller(IOAPIC).

      Implement ioctl Operations for the following

	1. APIC_GETID  		: returns identification no of Apic
	2. APIC_GETIRQS		: returns no of irq pins on APIC 
	3. APIC_GETIRQSTATUS	: returns irq pin status (enabled, disabled)
	4: APIC_GETIRQTYPE	: returns irq pin signal type

      write a test application to initiate and verify above commands.

 Note: Implement two versions of code for above problem statement
	i)  vfs version
	ii) sysfs version

